#source ~/env.rc

# Resources
RESOURCES="${RESOURCES:-$HOME}"

# Wikis
WIKIS="${RESOURCES}/wikis"

# Repositories
REPOS="${RESOURCES}/repositories"

# Python notebooks
NOTEBOOKS="${REPOS}/docdatpie"

# Data
DATA="${RESOURCES}/Data"

# ---

# Docker-I
#TODO substitute the following lines for "source .../docker_interface/env.rc"
DOCKERIRDIR="${REPOS}/docker/docker_interface/run"
export DOCKERIRDIR
export PATH="${PATH}:${DOCKERIRDIR}/bin"

# Git
git_check(){
  NAME=$(basename `git rev-parse --show-toplevel`)
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  printf "%-30s" "Fetching $NAME"
  printf "%-20s" "[$BRANCH] .. "

  git remote update > /dev/null 2>&1 || { red "Failed remote (repository)"; exit 1; }
  git rev-parse @{u} > /dev/null 2>&1|| { red "Failed remote (branch)"; exit 1; }

  LOCAL=$(git rev-parse @)
  REMOTE=$(git rev-parse @{u})
  BASE=$(git merge-base @ @{u})

  if [ $LOCAL = $REMOTE ]; then
    text='Up-to-date'
    blue "$text"
  elif [ $LOCAL = $BASE ]; then
    text='Get the updates (pull)'
    purple "$text"
  elif [ $REMOTE = $BASE ]; then
    text='Push modifications'
    yellow "$text"
  else
    text='Diverged'
    red "$text"
  fi
}

git_check_repo() {
  local REPODIR="$1"
  [[ -d $REPODIR ]] || return 1
  [[ -d "${REPODIR}/.git" ]] || return 1
  (
    cd $REPODIR && git_check
  )
}

git_check_repos() {
  for d in `ls -1 $REPOS`
  do
    local repo="${REPOS}/$d"
    [[ ! -d $repo  ]] && continue
    [[ ! -d "${repo}/.git" ]] && continue
    git_check_repo "$repo"
  done
}

echo_color() {
  local color="$1"
  local text="${@:2}"
  echo -e "\[\033[${color}m\]${text}\[\033[0m\]"
}

blue() {
  local blue='34'
  local text="$*"
  echo_color $blue $text
}

green() {
  local yellow='1;32'
  local text="$*"
  echo_color $yellow $text
}

yellow() {
  local yellow='1;33'
  local text="$*"
  echo_color $yellow $text
}

purple() {
  local purple='0;35'
  local text="$*"
  echo_color $purple $text
}

red() {
  local red='31'
  local text="$*"
  echo_color $red $text
}

# Automatically connect to eddie/joshua depending on the network I am (Sapienza/ASI)

ssh_joshua() {
  nc -z -G 1 joshua.icra.it 22 > /dev/null
  if [[ "$?" -eq "0" ]]; then
    ssh joshua.icra.it
  else
    nc -z -G 1 eddie.icra.it 80 > /dev/null
    if [[ "$?" -eq "0" ]]; then
      ssh -N -L 2222:joshua.icra.it:22 -p 80 eddie.icra.it
    else
      1>&2 echo "Nop! Neither 'joshua' nor 'eddie' are not available."
      return 1
    fi
  fi
}

# export PATH="${HOME}/local/bin:$PATH"
# export DOCKERIRDIR="$HOME/Estudos/Codigos/REPOS/docker_interface/run"
# export PATH="$PATH:$DOCKERIRDIR/bin"
# export WIKIS="/Users/chbrandt/Estudos/Codigos/WIKIS"

# Aliases
alias ls='ls -G'

# alias docker_cleani='docker images | grep "<none>" | tr -s [[:blank:]] | cut -d" " -f3 | xargs docker rmi'
# alias docker_clean='docker ps -a | cut -d" " -f1 | grep -v CONTAINER | xargs docker rm'
# alias docker_stop='docker ps -a | cut -d" " -f1 | grep -v CONTAINER | xargs docker stop'

docker_clean() {
  docker ps -a | grep -v CONTAINER | awk '{print $1}' | xargs -n1 -I{} docker rm {}
}

docker_clean_images() {
  docker images | grep '<none>' | awk '{print $3}' | xargs -n1 -I{} docker rmi {}
}

# # Anaconda
# export PATH="/anaconda/bin:$PATH"
#
# export REPOS=/Users/chbrandt/Estudos/Codigos/REPOS

function parse_git_branch {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  yellow "["${ref#refs/heads/}"]"
}

PS1="`green $PS1` "
#PS1="\$(parse_git_branch) $PS1 "

